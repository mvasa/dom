 do{
        sym = getNextSymbol();

        if( state == 1 ) {
          if( sym==10 || sym==32 ) {
            // state stays at 1
          }
          else if( letter(sym)) {
            state = 2;
	    data += (char) sym;
          }
          else if( sym = '=' || sym = '+' || sym = '-' ||sym = '*' ||sym = '/' ||sym = '(' ||sym = ')' ) {
            state = 3;
            data += (char) sym;
          }
	  else if( digit(sym) ) {
            state = 4;
            data += (char) sym;
          }
          else if( sym == '.' ) {
            state = 5;
            data += ".";
          }
          else if( sym == '\"' ) {
            state = 6;
          }
          else if( sym == -1 ) {// eof
            state = 13;
          }
          else {
            error("Error in lexical analysis phase with symbol "
                                 + sym + " in state " + state );
          }
        }// state 1 ==================================================
        else if( state == 2 ) {
          if( letter( sym ) || digit(sym) ) {
            // state stays at  2;
	     data += (char) sym;
          }
          else{
	      done = true;
	      putBackSymbol(sym);
	  
        }//=====================================================
        else if( state == 3 ) {
	      done = true;
	      putBackSymbol(sym);
                    
        }//=====================================================
        else if( state == 4 ) {
          if( digit(sym) ) {
            // stay in state 4
            data += (char) sym;
          }
	  else if( sym = '.'){
	      state = 5;
	  }
          else {
            done = true;
            putBackSymbol( sym );
          }
        }//=====================================================
        else if( state == 5 )
        {
          if( digit(sym) ) {
            data += (char ) sym;
          }
          else {
            done = true;
	    putBackSymbol(sym);
          }
        }// =====================================================
        else if( state == 6 ) {
          if( sym != '\"' ) {
            // stay in state 6
            data += (char ) sym;
          }
          else if( sym == '\"'){
	     state = 7;
	  
        }// =====================================================
        else if( state == 7 ) {
            data += (char) sym;
            done = true;
	    putBackSymbol(sym);
        }// =====================================================
        else if( state == 8 ) {
          done = true;
        }// =====================================================
        else {
          error("Unknown state " + state + " in Lexer");
        }

      }while( !done );
      
      // generate token depending on stopping state
      Token token;
///////////////////////////////////////////////////////////////////////////////////
      if( state == 2 ) {// reserved word, bif, or user-defined id

        for( int k=0; k<keywords.length; k++ )
          if( keywords[k].equals(data) )
          {
            token = new Token( data, "" );
            return token;
          }

        for( int k=0; k<builtInFunctions.length; k++ )
          if( builtInFunctions[k].equals(data) )
          {
            token = new Token( "bif", data );
            return token;
          }

        token = new Token( "id", data );
        return token;
      }
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	 else if( state == 3 ) {// special single symbol
        	token = new Token( "single", data );
        	return token;
      }      
	else if( state == 4 ) {// numeric token
        	token = new Token( "num", data );
        	return token;
      }
	else if(state == 5){////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( state == 7 ) {// string literal
        	token = new Token( "string", data );
        	return token;
      }
      
	else if( state == 8 ) {// eof
        	token = new Token( "eof", "" );
        	return token;
      } 
	else {// Lexer error
        	error("somehow Lexer FA halted in inappropriate state " + state );
        	return null;
      }
    }

  }// getNext